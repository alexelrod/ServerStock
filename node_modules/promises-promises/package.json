{
  "name": "promises-promises",
  "version": "0.0.5",
  "description": "Turn node-style callback functions into promises",
  "main": "./lib/promises-promises/promises-promises.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha ./tests/promise.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jclem/node-promises-promises"
  },
  "author": {
    "name": "Jonathan Clem"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jclem/node-promises-promises/issues"
  },
  "dependencies": {
    "q": "~0.9.6"
  },
  "devDependencies": {
    "mocha": "~1.12.0",
    "should": "~1.2.2"
  },
  "readme": "# promises-promises\n\nWrap functions that use node-style callbacks (`function (err, res)`) in a [q.js](https://github.com/kriskowal/q)-style promise.\n\n```javascript\nvar promise = require('promises-promises');\n\n// Ew!\nmyFunction('some', 'args', function(err, res) {\n  if (err) { return console.log(err.message) };\n  console.log(res);\n});\n\n// :)\npromise(myFunction, 'some', 'args').then(function(res) {\n  console.log(res);\n}, function(err) {\n  console.log(err.message);\n});\n\n// now your callback function can be part of a promise chain!\nanotherPromise.then(function(res) {\n\n  return promise(myFunction, res);\n\n}).then(function (res) {\n\n  console.log(res);\n\n});\n```\n\nEnjoy.\n",
  "readmeFilename": "README.md",
  "_id": "promises-promises@0.0.5",
  "_from": "promises-promises@"
}
