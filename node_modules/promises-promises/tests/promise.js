var promise = require('../lib/promises-promises/promises-promises'),
    should  = require('should'),
    status;

describe('promise', function() {
  context('for a function with no arguments', function() {
    context('and the callback is called with an error', function() {
      beforeEach(function() {
        status = false;
      });

      it('rejects the promise', function(done) {
        promise(fnNoArgs).fail(function(err) {
          err.message.should.equal('failure');
          done();
        });
      });
    });

    context('and the callback is called without an error', function() {
      beforeEach(function() {
        status = true;
      });

      it('resolves the promise', function(done) {
        promise(fnNoArgs).then(function(res) {
          res.should.equal(true);
          done();
        });
      });
    });
  });

  context('for a function with a single argument', function() {
    context('and the callback is called with an error', function() {
      beforeEach(function() {
        status = false;
      });

      it('rejects the promise', function(done) {
        promise(fnOneArg, 'test').fail(function(err) {
          err.message.should.equal('test');
          done();
        });
      });
    });

    context('and the callback is called without an error', function() {
      beforeEach(function() {
        status = true;
      });

      it('resolves the promise', function(done) {
        promise(fnOneArg, 'test').then(function(res) {
          res.should.equal('test');
          done();
        });
      });
    });
  });

  context('for a function with multiple arguments', function() {
    context('and the callback is called with an error', function() {
      beforeEach(function() {
        status = false;
      });

      it('rejects the promise', function(done) {
        promise(fnMultiArg, 'one', 'two', 'three').fail(function(err) {
          err.message.should.equal('one two three');
          done();
        });
      });
    });

    context('and the callback is called without an error', function() {
      beforeEach(function() {
        status = true;
      });

      it('resolves the promise', function(done) {
        promise(fnMultiArg, 'one', 'two', 'three').then(function(res) {
          res.should.equal('one two three');
          done();
        });
      });
    });
  });
});

function fnNoArgs(callback) {
  var err;

  if (status) {
    callback(null, true);
  } else {
    err = new Error('failure');
    callback(err);
  }
}

function fnOneArg(arg, callback) {
  var err;

  if (status) {
    callback(null, arg);
  } else {
    err = new Error(arg);
    callback(err);
  }
}

function fnMultiArg(arg1, arg2, arg3, callback) {
  var err,
      str = arg1 + ' ' + arg2 + ' ' + arg3;

  if (status) {
    callback(null, str);
  } else {
    err = new Error(str);
    callback(err);
  }
}
